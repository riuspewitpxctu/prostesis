//Los pines se pueden reubicar donde se necesiten, tomando, claro, ciertas consideraciones

#include <OneWire.h>
#include <DallasTemperature.h>
#include <Keypad.h>

const int pinRelay1 = 10; //pin del peltier+cooler
const int pinRelay2 = 10; //pin de la bomba alimentadora
const int pinRelay3 = 10; //pin de la bomba expendedora

//pines del display
const int pinA = 10;
const int pinB = 10;
const int pinC = 10;
const int pinD = 10;
const int pinE = 10;
const int pinF = 10;
const int pinG = 10;
const int pinp = 10;

const int Digito1 = 10;  // el primero a la izquierda
const int Digito2 = 10;
const int Digito3 = 10;
const int Digito4 = 10;  //necesitan resistencias de 330

//pin de datos del sensor de temperatura 0
const int pinDS18B20 = 10;         

//pines del teclado
const int pinMatriz1 = 10;           
const int pinMatriz2 = 10;
const int pinMatriz3 = 10;
const int pinMatriz4 = 10;
const int pinMatriz5 = 10;
const int pinMatriz6 = 10;
const int pinMatriz7 = 10;
const int pinMatriz8 = 10; //?Atte

//Declarando el teclado matriz
byte pinFila[4]    = {pinMatriz1, pinMatriz2, pinMatriz3, pinMatriz4};
byte pinColumna[4] = {pinMatriz5, pinMatriz6, pinMatriz7, pinMatriz8}; //pinMatriz8 es el pin que está más cerca a las letras
char keys [4][4]   = {{'1','2','3','A'},{'4','5','6','B'},{'7','8','9','C'},{'*','0','#','D'}};

// Instancia a las clases OneWire y DallasTemperature
OneWire SensorTemperatura(pinDS18B30);
DallasTemperature sensor.DS18B20(&SensorTemperatura);

// Instancia a la clase Keypad
Keypad teclado = Keypad(makeKeymap(keys), pinFila, pinColumna, 4, 4);

byte escribir_sin_pun[10][8] =
  {  { 1,1,1,1,1,1,0,0 },    // 0
     { 0,1,1,0,0,0,0,0 },    // 1
     { 1,1,0,1,1,0,1,0 },    // 2
     { 1,1,1,1,0,0,1,0 },    // 3
     { 0,0,1,0,0,1,1,0 },    // 4    
     { 1,0,1,1,0,1,1,0 },    // 5
     { 1,0,1,1,1,1,1,0 },    // 6
     { 1,1,1,0,0,0,0,0 },    // 7
     { 1,1,1,1,1,1,1,0 },    // 8
     { 1,1,1,0,0,1,1,0 }     // 9
   };
 byte escribir_con_pun[10][8] =
  {  { 1,1,1,1,1,1,0,1 },    // 0.
     { 0,1,1,0,0,0,0,1 },    // 1.
     { 1,1,0,1,1,0,1,1 },    // 2.
     { 1,1,1,1,0,0,1,1 },    // 3.
     { 0,0,1,0,0,1,1,1 },    // 4.   
     { 1,0,1,1,0,1,1,1 },    // 5.
     { 1,0,1,1,1,1,1,1 },    // 6.
     { 1,1,1,0,0,0,0,1 },    // 7.
     { 1,1,1,1,1,1,1,1 },    // 8.
     { 1,1,1,0,0,1,1,1 }     // 9.
   };

int T = 5;
int i = 0;
float temperatura_actual = 0;     // Aquí se guardará la temperatura segundo a segundo


//datos para un setup iterado
int lista_segmentos[8] = { pinA, pinB, pinC, pinD, pinE, pinF, pinG, pinp };
int lista_output[10] = { colocar aquí todos las 10 etiquetas }
int lista_input[10] = { colocar aquí todos las 10 etiquetas }

void setup(){

    Serial.begin(9600);
    sensorDS18B20.begin();

    for (int i = 0; i<10; i++) 
      {pinMode(lista_segmentos[i], OUTPUT)};
    for (int i = 0; i<10; i++) 
      {pinMode(lista_output[i], OUTPUT)};
    for (int i = 0; i<10; i++) 
      {pinMode(lista_input[i], INPUT)};
    
    }

void loop(){

    temperatura_actual = leer_temperatura();
    mostrar_numero(int(Num));
}

//Temperatura del [sensor etiquetado con 0]
float leer_temperatura(){ sensors.requestTemperatures();
                          float temperatura = sensors.getTempCByIndex(0);
                          return temperatura};
                          
void mostrar(int posicion, int Numero)
{  digitalWrite(Digito1,LOW);    // Apaga todos los digitos
   digitalWrite(Digito2,LOW);
   digitalWrite(Digito3,LOW);
   digitalWrite(Digito4,LOW);
  
  if (posicion == 2) { for (int i= 0 ; i<8 ; i++)
                         digitalWrite(lista_segmentos[i] , escribir_con_pun[Numero][i]) };
  else { for (int i= 0 ; i<8 ; i++)
           digitalWrite(lista_segmentos[i] , escribir_sin_pun[Numero][i]) };
     
   digitalWrite(posicion, HIGH); // Enciende el digito indicado
}

void mostrar_numero(Num)
{
  int cifra1 = Num/1000;
  int cifra2 = (Num%1000)/100;
  int cifra3 = (Num%100)/10;
  int cifra4 = Num%10;
  
  mostrar(Digito1 , cifra1);
  mostrar(Digito2 , cifra2);
  mostrar(Digito3 , cifra3);
  mostrar(Digito4 , cifra4);
}
